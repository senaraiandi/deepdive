deepdive {
  
  db.default {
    driver: "org.postgresql.Driver"
    url: "jdbc:postgresql://"${PGHOST}":"${PGPORT}"/"${DBNAME}
    user: ${PGUSER}
    password: ${PGPASSWORD}
  }

  # Put your variables here
  schema.variables {
    has_spouse.is_true: Boolean
  }

  # Put your extractors here
  extraction.extractors {
    
    ext_sentences.input: "SELECT * FROM articles order by id asc"
    ext_sentences.output_relation: "sentences"
    ext_sentences.udf: ${APP_HOME}"/udf/nlp_extractor/run.sh -k articles.id -v articles.text -l 20 -t 4"
    ext_sentences.before: ${APP_HOME}"/udf/before_sentences.sh"
    ext_sentences.input_batch_size: 10
    ext_sentences.output_batch_size: 1000

    ext_people.input: "SELECT * FROM sentences"
    ext_people.output_relation: "people_mentions"
    ext_people.udf: ${APP_HOME}"/udf/ext_people.py"
    ext_people.before: ${APP_HOME}"/udf/before_people.sh"
    ext_people.dependencies: ["ext_sentences"]

    ext_has_spouse_candidates.input: """
      SELECT sentences.id as "sentence_id", p1.id AS "p1.id", p1.text AS "p1.text", p2.id AS "p2.id", p2.text AS "p2.text" 
      FROM people_mentions p1, people_mentions p2, sentences 
      WHERE p1.sentence_id = p2.sentence_id AND p1.sentence_id = sentences.id AND p1.id != p2.id;"""
    ext_has_spouse_candidates.output_relation: "has_spouse"
    ext_has_spouse_candidates.udf: ${APP_HOME}"/udf/ext_has_spouse.py"
    ext_has_spouse_candidates.before: ${APP_HOME}"/udf/before_has_spouse.sh"
    ext_has_spouse_candidates.dependencies: ["ext_people"]


    ext_has_spouse_features.input: """
      SELECT sentences.words, has_spouse.id, p1.start_position AS "p1.start_position", p1.length AS "p1.length", 
        p2.start_position AS "p2.start_position", p2.length AS "p2.length"
      FROM has_spouse, people_mentions p1, people_mentions p2, sentences
      WHERE has_spouse.person1_id = p1.id AND has_spouse.person2_id = p2.id 
        AND has_spouse.sentence_id = sentences.id;"""
    ext_has_spouse_features.output_relation: "has_spouse_features"
    ext_has_spouse_features.udf: ${APP_HOME}"/udf/ext_has_spouse_features.py"
    ext_has_spouse_features.before: ${APP_HOME}"/udf/before_has_spouse_features.sh"
    ext_has_spouse_features.dependencies: ["ext_has_spouse_candidates"]

  }

  inference.factors: { 

    f_has_spouse_features.input_query: """
      SELECT has_spouse.id as "has_spouse.id", has_spouse.is_true AS "has_spouse.is_true", feature 
      FROM has_spouse, has_spouse_features 
      WHERE has_spouse_features.relation_id = has_spouse.id"""
    f_has_spouse_features.function: "IsTrue(has_spouse.is_true)"
    f_has_spouse_features.weight: "?(feature)"

    f_has_spouse_symmetry.input_query: """
      SELECT r1.is_true AS "has_spouse.r1.is_true", r2.is_true AS "has_spouse.r2.is_true", r1.id AS "has_spouse.r1.id", r2.id AS "has_spouse.r2.id"
      FROM has_spouse r1, has_spouse r2 
      WHERE r1.person1_id = r2.person2_id AND r1.person2_id = r2.person1_id"""
    f_has_spouse_symmetry.function: "Imply(has_spouse.r1.is_true, has_spouse.r2.is_true)"
    f_has_spouse_symmetry.weight: "?"

  }

  pipeline.run: "nonlp"
  pipeline.pipelines.nonlp: ["ext_people", "ext_has_spouse_candidates", "ext_has_spouse_features",
    "f_has_spouse_features", "f_has_spouse_symmetry"]
  pipeline.pipelines.inference: ["f_has_spouse_features", "f_has_spouse_symmetry"]

  # Specify a holdout fraction
  calibration.holdout_fraction: 0.25

  sampler.sampler_args: "-l 125 -s 1 -i 200 --alpha 0.001"

}