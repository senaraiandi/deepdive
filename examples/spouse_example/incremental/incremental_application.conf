
  deepdive.db.default {
    driver: "org.postgresql.Driver"
    url: "jdbc:postgresql://"${PGHOST}":"${PGPORT}"/"${DBNAME}
    user: ${PGUSER}
    password: ${PGPASSWORD}
    dbname: ${DBNAME}
    host: ${PGHOST}
    port: ${PGPORT}
    incremental_mode: INCREMENTAL
    }
    

      deepdive.schema.keys {
        dd_delta_has_spouse : [relation_id]
        dd_new_has_spouse : [relation_id]
      }

      deepdive.schema.variables {
        dd_delta_has_spouse.label: Boolean
      }
    

        deepdive.extraction.extractors.extraction_rule_1 {
          sql: """ DROP TABLE IF EXISTS dd_delta_articles CASCADE;
          CREATE TABLE
          dd_delta_articles(article_id text,
                 text text,
                 dd_count int)
          """
          style: "sql_extractor"
        }

        deepdive.extraction.extractors.extraction_rule_10 {
          sql: """ DROP TABLE IF EXISTS dd_new_people_mentions CASCADE;
          CREATE TABLE
          dd_new_people_mentions(sentence_id text,
                      start_position int,
                      length int,
                      text text,
                      mention_id text,
                      dd_count int)
          """
          style: "sql_extractor"
        }

        deepdive.extraction.extractors.extraction_rule_17 {
          sql: """ DROP TABLE IF EXISTS dd_delta_has_spouse_features CASCADE;
          CREATE TABLE
          dd_delta_has_spouse_features(relation_id text,
                            feature text,
                            dd_count int)
          """
          style: "sql_extractor"
        }

        deepdive.extraction.extractors.extraction_rule_2 {
          sql: """ DROP TABLE IF EXISTS dd_new_articles CASCADE;
          CREATE TABLE
          dd_new_articles(article_id text,
               text text,
               dd_count int)
          """
          style: "sql_extractor"
        }

        deepdive.extraction.extractors.extraction_rule_14 {
          sql: """ DROP TABLE IF EXISTS dd_new_has_spouse_candidates CASCADE;
          CREATE TABLE
          dd_new_has_spouse_candidates(person1_id text,
                            person2_id text,
                            sentence_id text,
                            description text,
                            relation_id text,
                            is_true boolean,
                            dd_count int)
          """
          style: "sql_extractor"
        }

        deepdive.extraction.extractors.extraction_rule_18 {
          sql: """ DROP TABLE IF EXISTS dd_new_has_spouse_features CASCADE;
          CREATE TABLE
          dd_new_has_spouse_features(relation_id text,
                          feature text,
                          dd_count int)
          """
          style: "sql_extractor"
        }

        deepdive.extraction.extractors.extraction_rule_6 {
          sql: """ DROP TABLE IF EXISTS dd_new_sentences CASCADE;
          CREATE TABLE
          dd_new_sentences(document_id text,
                sentence text,
                words text,
                lemma text,
                pos_tags text,
                dependencies text,
                ner_tags text,
                sentence_offset int,
                sentence_id text,
                dd_count int)
          """
          style: "sql_extractor"
        }

        deepdive.extraction.extractors.extraction_rule_9 {
          sql: """ DROP TABLE IF EXISTS dd_delta_people_mentions CASCADE;
          CREATE TABLE
          dd_delta_people_mentions(sentence_id text,
                        start_position int,
                        length int,
                        text text,
                        mention_id text,
                        dd_count int)
          """
          style: "sql_extractor"
        }

        deepdive.extraction.extractors.extraction_rule_13 {
          sql: """ DROP TABLE IF EXISTS dd_delta_has_spouse_candidates CASCADE;
          CREATE TABLE
          dd_delta_has_spouse_candidates(person1_id text,
                              person2_id text,
                              sentence_id text,
                              description text,
                              relation_id text,
                              is_true boolean,
                              dd_count int)
          """
          style: "sql_extractor"
        }

        deepdive.extraction.extractors.extraction_rule_5 {
          sql: """ DROP TABLE IF EXISTS dd_delta_sentences CASCADE;
          CREATE TABLE
          dd_delta_sentences(document_id text,
                  sentence text,
                  words text,
                  lemma text,
                  pos_tags text,
                  dependencies text,
                  ner_tags text,
                  sentence_offset int,
                  sentence_id text,
                  dd_count int)
          """
          style: "sql_extractor"
        }

        deepdive.extraction.extractors.extraction_rule_21 {
          sql: """ DROP TABLE IF EXISTS dd_delta_has_spouse CASCADE;
          CREATE TABLE
          dd_delta_has_spouse(relation_id text,
                   id bigint,
                   label boolean,
                   dd_count int)
          """
          style: "sql_extractor"
        }

        deepdive.extraction.extractors.extraction_rule_22 {
          sql: """ DROP TABLE IF EXISTS dd_new_has_spouse CASCADE;
          CREATE TABLE
          dd_new_has_spouse(relation_id text,
                 id bigint,
                 label boolean,
                 dd_count int)
          """
          style: "sql_extractor"
        }

        deepdive.extraction.extractors.cleanup {
          sql: """
          TRUNCATE dd_delta_articles;
          TRUNCATE dd_new_people_mentions;
          TRUNCATE dd_delta_has_spouse_features;
          TRUNCATE dd_new_articles;
          TRUNCATE dd_new_has_spouse_candidates;
          TRUNCATE dd_new_has_spouse_features;
          TRUNCATE dd_new_sentences;
          TRUNCATE dd_delta_people_mentions;
          TRUNCATE dd_delta_has_spouse_candidates;
          TRUNCATE dd_delta_sentences;
          TRUNCATE dd_delta_has_spouse;
          TRUNCATE dd_new_has_spouse;
          """
          style: "sql_extractor"
        }

      deepdive.extraction.extractors.extraction_rule_30 {
        sql: """ DROP VIEW IF EXISTS dd_delta_ext_has_spouse_features_input;
        CREATE VIEW dd_delta_ext_has_spouse_features_input AS 
            SELECT R0.words AS "sentences.R0.words" , R1.relation_id AS "has_spouse_candidates.R1.relation_id" , R2.start_position AS "people_mentions.R2.start_position" , R2.length AS "people_mentions.R2.length" , R3.start_position AS "people_mentions.R3.start_position" , R3.length AS "people_mentions.R3.length" , R0.dd_count * R1.dd_count * R2.dd_count * R3.dd_count AS "dd_count" 
            FROM sentences R0, has_spouse_candidates R1, people_mentions R2, people_mentions R3
        WHERE R1.sentence_id = R0.sentence_id  AND R2.sentence_id = R0.sentence_id  AND R2.mention_id = R1.person1_id  AND R3.sentence_id = R0.sentence_id  AND R3.mention_id = R1.person2_id  UNION 
            SELECT R0.words AS "dd_delta_sentences.R0.words" , R1.relation_id AS "has_spouse_candidates.R1.relation_id" , R2.start_position AS "people_mentions.R2.start_position" , R2.length AS "people_mentions.R2.length" , R3.start_position AS "people_mentions.R3.start_position" , R3.length AS "people_mentions.R3.length" , R0.dd_count * R1.dd_count * R2.dd_count * R3.dd_count AS "dd_count" 
            FROM dd_delta_sentences R0, has_spouse_candidates R1, people_mentions R2, people_mentions R3
        WHERE R1.sentence_id = R0.sentence_id  AND R2.sentence_id = R0.sentence_id  AND R2.mention_id = R1.person1_id  AND R3.sentence_id = R0.sentence_id  AND R3.mention_id = R1.person2_id  UNION 
            SELECT R0.words AS "dd_new_sentences.R0.words" , R1.relation_id AS "dd_delta_has_spouse_candidates.R1.relation_id" , R2.start_position AS "people_mentions.R2.start_position" , R2.length AS "people_mentions.R2.length" , R3.start_position AS "people_mentions.R3.start_position" , R3.length AS "people_mentions.R3.length" , R0.dd_count * R1.dd_count * R2.dd_count * R3.dd_count AS "dd_count" 
            FROM dd_new_sentences R0, dd_delta_has_spouse_candidates R1, people_mentions R2, people_mentions R3
        WHERE R1.sentence_id = R0.sentence_id  AND R2.sentence_id = R0.sentence_id  AND R2.mention_id = R1.person1_id  AND R3.sentence_id = R0.sentence_id  AND R3.mention_id = R1.person2_id  UNION 
            SELECT R0.words AS "dd_new_sentences.R0.words" , R1.relation_id AS "dd_new_has_spouse_candidates.R1.relation_id" , R2.start_position AS "dd_delta_people_mentions.R2.start_position" , R2.length AS "dd_delta_people_mentions.R2.length" , R3.start_position AS "people_mentions.R3.start_position" , R3.length AS "people_mentions.R3.length" , R0.dd_count * R1.dd_count * R2.dd_count * R3.dd_count AS "dd_count" 
            FROM dd_new_sentences R0, dd_new_has_spouse_candidates R1, dd_delta_people_mentions R2, people_mentions R3
        WHERE R1.sentence_id = R0.sentence_id  AND R2.sentence_id = R0.sentence_id  AND R2.mention_id = R1.person1_id  AND R3.sentence_id = R0.sentence_id  AND R3.mention_id = R1.person2_id  UNION 
            SELECT R0.words AS "dd_new_sentences.R0.words" , R1.relation_id AS "dd_new_has_spouse_candidates.R1.relation_id" , R2.start_position AS "dd_new_people_mentions.R2.start_position" , R2.length AS "dd_new_people_mentions.R2.length" , R3.start_position AS "dd_delta_people_mentions.R3.start_position" , R3.length AS "dd_delta_people_mentions.R3.length" , R0.dd_count * R1.dd_count * R2.dd_count * R3.dd_count AS "dd_count" 
            FROM dd_new_sentences R0, dd_new_has_spouse_candidates R1, dd_new_people_mentions R2, dd_delta_people_mentions R3
        WHERE R1.sentence_id = R0.sentence_id  AND R2.sentence_id = R0.sentence_id  AND R2.mention_id = R1.person1_id  AND R3.sentence_id = R0.sentence_id  AND R3.mention_id = R1.person2_id 
        """
        style: "sql_extractor"
          dependencies: [ "extraction_rule_23" ,  "extraction_rule_15" ,  "extraction_rule_26" ,  "extraction_rule_7" ,  "extraction_rule_11" ]
      }
    

      deepdive.extraction.extractors.extraction_rule_11 {
        sql: """ TRUNCATE dd_new_people_mentions;
        INSERT INTO dd_new_people_mentions 
            SELECT R0.sentence_id, R0.start_position, R0.length, R0.text, R0.mention_id, R0.dd_count
            FROM people_mentions R0
         UNION 
            SELECT R0.sentence_id, R0.start_position, R0.length, R0.text, R0.mention_id, R0.dd_count
            FROM dd_delta_people_mentions R0
        
        """
        style: "sql_extractor"
          dependencies: [ "extraction_rule_23" ]
      }
    

      deepdive.extraction.extractors.extraction_rule_3 {
        sql: """ TRUNCATE dd_new_articles;
        INSERT INTO dd_new_articles 
            SELECT R0.article_id, R0.text, R0.dd_count
            FROM articles R0
         UNION 
            SELECT R0.article_id, R0.text, R0.dd_count
            FROM dd_delta_articles R0
        
        """
        style: "sql_extractor"
          
      }
    

      deepdive.extraction.extractors.extraction_rule_24 {
        sql: """ DROP VIEW IF EXISTS dd_delta_ext_people_input;
        CREATE VIEW dd_delta_ext_people_input AS 
            SELECT R0.sentence_id AS "dd_delta_sentences.R0.sentence_id" , R0.words AS "dd_delta_sentences.R0.words" , R0.ner_tags AS "dd_delta_sentences.R0.ner_tags" , R0.dd_count AS "dd_count" 
            FROM dd_delta_sentences R0
        
        """
        style: "sql_extractor"
          
      }
    

      deepdive.extraction.extractors.extraction_rule_15 {
        sql: """ TRUNCATE dd_new_has_spouse_candidates;
        INSERT INTO dd_new_has_spouse_candidates 
            SELECT R0.person1_id, R0.person2_id, R0.sentence_id, R0.description, R0.relation_id, R0.is_true, R0.dd_count
            FROM has_spouse_candidates R0
         UNION 
            SELECT R0.person1_id, R0.person2_id, R0.sentence_id, R0.description, R0.relation_id, R0.is_true, R0.dd_count
            FROM dd_delta_has_spouse_candidates R0
        
        """
        style: "sql_extractor"
          dependencies: [ "extraction_rule_26" ]
      }
    

      deepdive.extraction.extractors.extraction_rule_19 {
        sql: """ TRUNCATE dd_new_has_spouse_features;
        INSERT INTO dd_new_has_spouse_features 
            SELECT R0.relation_id, R0.feature, R0.dd_count
            FROM has_spouse_features R0
         UNION 
            SELECT R0.relation_id, R0.feature, R0.dd_count
            FROM dd_delta_has_spouse_features R0
        
        """
        style: "sql_extractor"
          dependencies: [ "extraction_rule_29" ]
      }
    

      deepdive.extraction.extractors.extraction_rule_7 {
        sql: """ TRUNCATE dd_new_sentences;
        INSERT INTO dd_new_sentences 
            SELECT R0.document_id, R0.sentence, R0.words, R0.lemma, R0.pos_tags, R0.dependencies, R0.ner_tags, R0.sentence_offset, R0.sentence_id, R0.dd_count
            FROM sentences R0
         UNION 
            SELECT R0.document_id, R0.sentence, R0.words, R0.lemma, R0.pos_tags, R0.dependencies, R0.ner_tags, R0.sentence_offset, R0.sentence_id, R0.dd_count
            FROM dd_delta_sentences R0
        
        """
        style: "sql_extractor"
          
      }
    

      deepdive.extraction.extractors.extraction_rule_27 {
        sql: """ DROP VIEW IF EXISTS dd_delta_ext_has_spouse_input;
        CREATE VIEW dd_delta_ext_has_spouse_input AS 
            SELECT R0.sentence_id AS "dd_delta_people_mentions.R0.sentence_id" , R0.mention_id AS "dd_delta_people_mentions.R0.mention_id" , R0.text AS "dd_delta_people_mentions.R0.text" , R1.mention_id AS "people_mentions.R1.mention_id" , R1.text AS "people_mentions.R1.text" , R0.dd_count * R1.dd_count AS "dd_count" 
            FROM dd_delta_people_mentions R0, people_mentions R1
        WHERE R1.sentence_id = R0.sentence_id  UNION 
            SELECT R0.sentence_id AS "dd_new_people_mentions.R0.sentence_id" , R0.mention_id AS "dd_new_people_mentions.R0.mention_id" , R0.text AS "dd_new_people_mentions.R0.text" , R1.mention_id AS "dd_delta_people_mentions.R1.mention_id" , R1.text AS "dd_delta_people_mentions.R1.text" , R0.dd_count * R1.dd_count AS "dd_count" 
            FROM dd_new_people_mentions R0, dd_delta_people_mentions R1
        WHERE R1.sentence_id = R0.sentence_id 
        """
        style: "sql_extractor"
          dependencies: [ "extraction_rule_23" ,  "extraction_rule_11" ]
      }
    

      deepdive.extraction.extractors.extraction_rule_32 {
        sql: """ 
        INSERT INTO dd_delta_has_spouse SELECT DISTINCT R0.relation_id, 0 as id, R0.is_true AS label , R0.dd_count AS dd_count
          FROM has_spouse_candidates R0
        
          
        """
        style: "sql_extractor"
          dependencies: [ "extraction_rule_26" ]
      }
    

        deepdive.extraction.extractors.extraction_rule_23 {
          input: """ SELECT * FROM dd_delta_ext_people_input
          """
          output_relation: "dd_delta_people_mentions"
          udf: ${APP_HOME}"/udf/ext_people.py"
          style: "tsv_extractor" 
          dependencies: [ "extraction_rule_24" ]
        }
      

        deepdive.extraction.extractors.extraction_rule_29 {
          input: """ SELECT * FROM dd_delta_ext_has_spouse_features_input
          """
          output_relation: "dd_delta_has_spouse_features"
          udf: ${APP_HOME}"/udf/ext_has_spouse_features_inc.py"
          style: "tsv_extractor" 
          dependencies: [ "extraction_rule_30" ]
        }
      

        deepdive.extraction.extractors.extraction_rule_26 {
          input: """ SELECT * FROM dd_delta_ext_has_spouse_input
          """
          output_relation: "dd_delta_has_spouse_candidates"
          udf: ${APP_HOME}"/udf/ext_has_spouse.py"
          style: "tsv_extractor" 
          dependencies: [ "extraction_rule_27" ]
        }
      

        deepdive.inference.factors.dd_delta_has_spouse_0 {
          input_query: """
          SELECT R0.id AS "dd_delta_has_spouse.R0.id" , R2.feature AS "has_spouse_features.R2.feature"  , R0.dd_count * R1.dd_count * R2.dd_count AS "dd_count" 
          FROM dd_delta_has_spouse R0, dd_delta_has_spouse_candidates R1, has_spouse_features R2
        WHERE R1.relation_id = R0.relation_id  AND R2.relation_id = R0.relation_id  UNION 
          SELECT R0.id AS "dd_delta_has_spouse.R0.id" , R2.feature AS "dd_delta_has_spouse_features.R2.feature"  , R0.dd_count * R1.dd_count * R2.dd_count AS "dd_count" 
          FROM dd_delta_has_spouse R0, dd_new_has_spouse_candidates R1, dd_delta_has_spouse_features R2
        WHERE R1.relation_id = R0.relation_id  AND R2.relation_id = R0.relation_id """
          function: "Imply(dd_delta_has_spouse.R0.label)"
          weight: "?(has_spouse_features.R2.feature)"
        }

deepdive.pipeline.base_dir: ${BASEDIR}      
deepdive.pipeline.run: ${PIPELINE}
deepdive.pipeline.pipelines.initdb: [extraction_rule_1, extraction_rule_10, extraction_rule_17, extraction_rule_2, extraction_rule_14, extraction_rule_18, extraction_rule_6, extraction_rule_9, extraction_rule_13, extraction_rule_5, extraction_rule_21, extraction_rule_22]
deepdive.pipeline.pipelines.extraction: [extraction_rule_7, extraction_rule_19, extraction_rule_32, extraction_rule_3, extraction_rule_26, extraction_rule_30, extraction_rule_23, extraction_rule_27, extraction_rule_11, extraction_rule_24, extraction_rule_29, extraction_rule_15]
deepdive.pipeline.pipelines.inference: [dd_delta_has_spouse_0]
deepdive.pipeline.pipelines.cleanup: [cleanup]
