
  deepdive.db.default {
    driver: "org.postgresql.Driver"
    url: "jdbc:postgresql://"${PGHOST}":"${PGPORT}"/"${DBNAME}
    user: ${PGUSER}
    password: ${PGPASSWORD}
    dbname: ${DBNAME}
    host: ${PGHOST}
    port: ${PGPORT}
    isIncremental: ${ISINCREMENTAL}
  }
  

      deepdive.schema.variables {
        dd_delta_has_spouse.label: Boolean
      }

      deepdive.schema.keys {
       dd_delta_has_spouse: [relation_id]
      }

        deepdive.inference.factors.factor_dd_delta_has_spouse {
          input_query: """
        SELECT R0.id AS "dd_delta_has_spouse.R0.id" , R2.feature AS "has_spouse_features.R2.feature"  , R0.dd_count * R1.dd_count * R2.dd_count AS "dd_count" 
        FROM dd_delta_has_spouse R0, dd_delta_has_spouse_candidates R1, has_spouse_features R2
        WHERE R1.relation_id = R0.relation_id  AND R2.relation_id = R0.relation_id """
          function: "Imply(dd_delta_has_spouse.R0.label)"
          weight: "?(has_spouse_features.R2.feature)"
        }
      

        deepdive.inference.factors.factor_dd_delta_has_spouse {
          input_query: """
        SELECT R0.id AS "dd_delta_has_spouse.R0.id" , R2.feature AS "dd_delta_has_spouse_features.R2.feature"  , R0.dd_count * R1.dd_count * R2.dd_count AS "dd_count" 
        FROM dd_delta_has_spouse R0, has_spouse_candidates R1, dd_delta_has_spouse_features R2
        WHERE R1.relation_id = R0.relation_id  AND R2.relation_id = R0.relation_id """
          function: "Imply(dd_delta_has_spouse.R0.label)"
          weight: "?(dd_delta_has_spouse_features.R2.feature)"
        }
      

        deepdive.inference.factors.factor_dd_delta_has_spouse {
          input_query: """
        SELECT R0.id AS "dd_delta_has_spouse.R0.id" , R2.feature AS "dd_delta_has_spouse_features.R2.feature"  , R0.dd_count * R1.dd_count * R2.dd_count AS "dd_count" 
        FROM dd_delta_has_spouse R0, dd_delta_has_spouse_candidates R1, dd_delta_has_spouse_features R2
        WHERE R1.relation_id = R0.relation_id  AND R2.relation_id = R0.relation_id """
          function: "Imply(dd_delta_has_spouse.R0.label)"
          weight: "?(dd_delta_has_spouse_features.R2.feature)"
        }
      
