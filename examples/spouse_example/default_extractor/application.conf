deepdive {
  
  db.default {
    driver: "org.postgresql.Driver"
    url: "jdbc:postgresql://"${PGHOST}":"${PGPORT}"/"${DBNAME} #"
    user: ${PGUSER}
    password: ${PGPASSWORD}
    dbname: ${DBNAME}
    host: ${PGHOST}
    port: ${PGPORT}
  }

  # Put your variables here
  schema.variables {
    has_spouse.is_true: Boolean
  }

  # Put your extractors here
  extraction.extractors {

    # Clean sentence table
    ext_clear_sentence {
      style: "sql_extractor"
      sql: """DELETE FROM sentences;"""
    }

    # Clean output tables of all extractors
    ext_clear_table {
      style: "sql_extractor"
      sql: """
        DELETE FROM people_mentions;
        DELETE FROM has_spouse;
        DELETE FROM has_spouse_features;
        """
    }

    # nlp_extractor only supports the default extractor.
    ext_sentences {
      input: """
        SELECT article_id, text 
        FROM articles 
        ORDER BY article_id ASC
        """
      output_relation: "sentences"
      udf: "examples/nlp_extractor/run.sh -k article_id -v text -l 120 -t 4"
      input_batch_size: 10
      output_batch_size: 1000
      parallelism: 8
      dependencies: ["ext_clear_sentence"]
    }


    ext_people {
      input: """
          SELECT  sentence_id, words, ner_tags
          FROM    sentences
          """
      output_relation: "people_mentions"
      udf: ${APP_HOME}"/udf/ext_people.py"
      # udf: "util/extractor_input_writer.py /tmp/dd-sample-people.txt"  # getting example input data for this extractor
      dependencies: ["ext_sentences", "ext_clear_table"]
    }

    ext_has_spouse_candidates {
      input: """
        SELECT  sentences.sentence_id, 
                p1.mention_id AS p1_mention_id, 
                p1.text AS p1_text, 
                p2.mention_id AS p2_mention_id, 
                p2.text AS p2_text 
         FROM   people_mentions p1, 
                people_mentions p2, 
                sentences 
        WHERE   p1.sentence_id = p2.sentence_id 
          AND   p1.sentence_id = sentences.sentence_id 
          AND   p1.mention_id != p2.mention_id
          """
      output_relation: "has_spouse"
      udf: ${APP_HOME}"/udf/ext_has_spouse.py"
      # udf: "util/extractor_input_writer.py /tmp/dd-sample-has_spouse.txt"  # getting example input data for this extractor
      dependencies: ["ext_people"]
    }

    ext_has_spouse_features {
      input: """
        SELECT  sentences.words, 
                lemma,
                has_spouse.relation_id, 
                p1.start_position AS p1_start,
                p1.length AS p1_length,
                p2.start_position AS p2_start,
                p2.length AS p2_length
          FROM  has_spouse, 
                people_mentions p1, 
                people_mentions p2, 
                sentences
         WHERE  has_spouse.person1_id = p1.mention_id 
           AND  has_spouse.person2_id = p2.mention_id 
           AND  has_spouse.sentence_id = sentences.sentence_id
           """
      output_relation: "has_spouse_features"
      udf: ${APP_HOME}"/udf/ext_has_spouse_features.py"
      # udf: "util/extractor_input_writer.py /tmp/dd-sample-features.txt"  # getting example input data for this extractor
      dependencies: ["ext_has_spouse_candidates"]
    }


  }

  inference.factors: { 

    # We require developers to select: 
    #   - reserved "id" column, 
    #   - variable column, 
    #   - weight dependencies,
    # for variable tables.
    f_has_spouse_features {
      input_query: """
        SELECT  has_spouse.id AS "has_spouse.id", 
                has_spouse.is_true AS "has_spouse.is_true", 
                feature 
        FROM    has_spouse, 
                has_spouse_features 
        WHERE   has_spouse_features.relation_id = has_spouse.relation_id
        """
      function: "IsTrue(has_spouse.is_true)"
      weight: "?(feature)"
    }

    f_has_spouse_symmetry {
      input_query: """
        SELECT  r1.is_true AS "has_spouse.r1.is_true", 
                r2.is_true AS "has_spouse.r2.is_true", 
                r1.id AS "has_spouse.r1.id", 
                r2.id AS "has_spouse.r2.id"
        FROM    has_spouse r1, 
                has_spouse r2 
        WHERE   r1.person1_id = r2.person2_id 
          AND   r1.person2_id = r2.person1_id
          """
      function: "Equal(has_spouse.r1.is_true, has_spouse.r2.is_true)"
      weight: "?" # We are pretty sure about this rule
    }

  }

  # # If you want to re-extract all sentences:
  # pipeline.run: "nlp"
  pipeline.pipelines.nlp: ["ext_clear_sentence", "ext_sentences"]
  pipeline.run: "nonlp"
  pipeline.pipelines.nonlp: [
    "ext_clear_table",
    "ext_people",
    "ext_has_spouse_candidates",
    "ext_has_spouse_features",
    "f_has_spouse_features",
    "f_has_spouse_symmetry"
    ]

  # Improved sampler arguments
  # sampler.sampler_args: "-l 5000 -d 0.99 -s 1 -i 1000 --alpha 0.01"

  # Specify a holdout fraction
  calibration.holdout_fraction: 0.25

}
