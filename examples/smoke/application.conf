deepdive {

  db.default: {
    driver  : "org.postgresql.Driver"
    url     : "jdbc:postgresql://"${PGHOST}":"${PGPORT}"/"${DBNAME}
    user    : ${PGUSER}
    password: ${PGPASSWORD}
    dbname  : ${DBNAME}
    host    : ${PGHOST}
    port    : ${PGPORT}
  }

  schema.variables {
    person_has_cancer.has_cancer : Boolean
    person_smokes.smokes         : Boolean
    friends.are_friends          : Boolean
  }

  extraction.extractors: {
    # No extractors needed for this example
  }

  inference.factors: {
    
    # Smokes(x) => Cancer(x)
    # Learn the weight based on the training data
    people {
      input_query: """
          SELECT person_smokes.id AS "person_smokes.id",
                 person_has_cancer.id AS "person_has_cancer.id",
                 person_smokes.smokes AS "person_smokes.smokes",
                 person_has_cancer.has_cancer AS "person_has_cancer.has_cancer"
            FROM person_has_cancer, person_smokes
           WHERE person_has_cancer.person_id = person_smokes.person_id
        """
      function  : "Imply(person_smokes.smokes, person_has_cancer.has_cancer)"
      weight    : 0.5
    }


    # Friends(x, y) => (Smokes(x) <=> Smokes(y)): equivalent to 2 rules
    # !Friends(a1,a2) v !Smokes(a1) v Smokes(a2) (friends_1)
    # !Friends(a1,a2) v !Smokes(a2) v Smokes(a1) (friends_2)
    # (if 1 and 3 are friends then 3 and 1 are friends too)

    friends_1 {
      input_query: """
          SELECT p1.id AS "person_smokes.p1.id",
                 p2.id AS "person_smokes.p2.id",
                 p1.smokes AS "person_smokes.p1.smokes",
                 p2.smokes AS "person_smokes.p2.smokes",
                 friends.id AS "friends.id",
                 friends.are_friends AS "friends.are_friends"
            FROM friends,
                 person_smokes AS p1,
                 person_smokes AS p2
           WHERE friends.person_id = p1.person_id AND
                 friends.friend_id = p2.person_id
        """
      function  : "Or(!friends.are_friends, !person_smokes.p1.smokes, person_smokes.p2.smokes)"
      weight    : 0.4
    }

    friends_2 {
      input_query: """
          SELECT p1.id AS "person_smokes.p1.id",
                 p2.id AS "person_smokes.p2.id",
                 p1.smokes AS "person_smokes.p1.smokes",
                 p2.smokes AS "person_smokes.p2.smokes",
                 friends.id AS "friends.id",
                 friends.are_friends AS "friends.are_friends"
            FROM friends,
                 person_smokes AS p1,
                 person_smokes AS p2
           WHERE friends.person_id = p1.person_id AND
                 friends.friend_id = p2.person_id
        """
      function  : "Or(!friends.are_friends, !person_smokes.p2.smokes, person_smokes.p1.smokes)"
      weight    : 0.4
    }

  }

  calibration.holdout_fraction: 0.0
}
