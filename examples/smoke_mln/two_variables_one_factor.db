--
-- PostgreSQL database dump
--

SET statement_timeout = 0;
SET lock_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;

--
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


SET search_path = public, pg_catalog;

--
-- Name: array_accum(anyelement); Type: AGGREGATE; Schema: public; Owner: gengyl08
--

CREATE AGGREGATE array_accum(anyelement) (
    SFUNC = array_append,
    STYPE = anyarray,
    INITCOND = '{}'
);


ALTER AGGREGATE public.array_accum(anyelement) OWNER TO gengyl08;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: constants; Type: TABLE; Schema: public; Owner: gengyl08; Tablespace: 
--

CREATE TABLE constants (
    id bigint NOT NULL,
    string text
);


ALTER TABLE public.constants OWNER TO gengyl08;

--
-- Name: dd_factor_sequence; Type: SEQUENCE; Schema: public; Owner: gengyl08
--

CREATE SEQUENCE dd_factor_sequence
    START WITH 0
    INCREMENT BY 1
    MINVALUE -1
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.dd_factor_sequence OWNER TO gengyl08;

--
-- Name: dd_graph_factormeta; Type: TABLE; Schema: public; Owner: gengyl08; Tablespace: 
--

CREATE TABLE dd_graph_factormeta (
    name text,
    funcid integer,
    sign text
);


ALTER TABLE public.dd_graph_factormeta OWNER TO gengyl08;

--
-- Name: dd_graph_variables_holdout; Type: TABLE; Schema: public; Owner: gengyl08; Tablespace: 
--

CREATE TABLE dd_graph_variables_holdout (
    variable_id bigint NOT NULL
);


ALTER TABLE public.dd_graph_variables_holdout OWNER TO gengyl08;

--
-- Name: dd_graph_weights; Type: TABLE; Schema: public; Owner: gengyl08; Tablespace: 
--

CREATE TABLE dd_graph_weights (
    id bigint,
    isfixed integer,
    initvalue real,
    cardinality text
);


ALTER TABLE public.dd_graph_weights OWNER TO gengyl08;

--
-- Name: dd_inference_result_variables; Type: TABLE; Schema: public; Owner: gengyl08; Tablespace: 
--

CREATE TABLE dd_inference_result_variables (
    id bigint,
    category bigint,
    expectation double precision
);


ALTER TABLE public.dd_inference_result_variables OWNER TO gengyl08;

--
-- Name: dd_inference_result_weights; Type: TABLE; Schema: public; Owner: gengyl08; Tablespace: 
--

CREATE TABLE dd_inference_result_weights (
    id bigint NOT NULL,
    weight double precision
);


ALTER TABLE public.dd_inference_result_weights OWNER TO gengyl08;

--
-- Name: dd_inference_result_variables_mapped_weights; Type: VIEW; Schema: public; Owner: gengyl08
--

CREATE VIEW dd_inference_result_variables_mapped_weights AS
 SELECT dd_graph_weights.id,
    dd_graph_weights.isfixed,
    dd_graph_weights.initvalue,
    dd_graph_weights.cardinality,
    dd_inference_result_weights.weight
   FROM (dd_graph_weights
   JOIN dd_inference_result_weights ON ((dd_graph_weights.id = dd_inference_result_weights.id)))
  ORDER BY abs(dd_inference_result_weights.weight) DESC;


ALTER TABLE public.dd_inference_result_variables_mapped_weights OWNER TO gengyl08;

--
-- Name: dd_query_clause1; Type: TABLE; Schema: public; Owner: gengyl08; Tablespace: 
--

CREATE TABLE dd_query_clause1 (
    "t0.id" bigint,
    "t1.id" bigint,
    id bigint
);


ALTER TABLE public.dd_query_clause1 OWNER TO gengyl08;

--
-- Name: dd_variable_sequence; Type: SEQUENCE; Schema: public; Owner: gengyl08
--

CREATE SEQUENCE dd_variable_sequence
    START WITH 0
    INCREMENT BY 1
    MINVALUE -1
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.dd_variable_sequence OWNER TO gengyl08;

--
-- Name: dd_weight_sequence; Type: SEQUENCE; Schema: public; Owner: gengyl08
--

CREATE SEQUENCE dd_weight_sequence
    START WITH 0
    INCREMENT BY 1
    MINVALUE -1
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.dd_weight_sequence OWNER TO gengyl08;

--
-- Name: pred_cancer; Type: TABLE; Schema: public; Owner: gengyl08; Tablespace: 
--

CREATE TABLE pred_cancer (
    id bigint NOT NULL,
    truth boolean DEFAULT false,
    prior double precision,
    inquery boolean DEFAULT false,
    atomid integer,
    itruth boolean,
    prob double precision,
    useful boolean DEFAULT false,
    person1 bigint
);


ALTER TABLE public.pred_cancer OWNER TO gengyl08;

--
-- Name: pred_cancer_evidence; Type: TABLE; Schema: public; Owner: gengyl08; Tablespace: 
--

CREATE TABLE pred_cancer_evidence (
    id bigint NOT NULL,
    truth boolean,
    prior double precision,
    club integer DEFAULT 0,
    atomid integer,
    itruth boolean,
    prob double precision,
    useful boolean DEFAULT false,
    person1 bigint
);


ALTER TABLE public.pred_cancer_evidence OWNER TO gengyl08;

--
-- Name: pred_cancer_evidence_id_seq; Type: SEQUENCE; Schema: public; Owner: gengyl08
--

CREATE SEQUENCE pred_cancer_evidence_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.pred_cancer_evidence_id_seq OWNER TO gengyl08;

--
-- Name: pred_cancer_evidence_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: gengyl08
--

ALTER SEQUENCE pred_cancer_evidence_id_seq OWNED BY pred_cancer_evidence.id;


--
-- Name: pred_cancer_id_seq; Type: SEQUENCE; Schema: public; Owner: gengyl08
--

CREATE SEQUENCE pred_cancer_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.pred_cancer_id_seq OWNER TO gengyl08;

--
-- Name: pred_cancer_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: gengyl08
--

ALTER SEQUENCE pred_cancer_id_seq OWNED BY pred_cancer.id;


--
-- Name: pred_cancer_truth_inference; Type: VIEW; Schema: public; Owner: gengyl08
--

CREATE VIEW pred_cancer_truth_inference AS
 SELECT pred_cancer.id,
    pred_cancer.truth,
    pred_cancer.prior,
    pred_cancer.inquery,
    pred_cancer.atomid,
    pred_cancer.itruth,
    pred_cancer.prob,
    pred_cancer.useful,
    pred_cancer.person1,
    mir.category,
    mir.expectation
   FROM pred_cancer,
    dd_inference_result_variables mir
  WHERE (pred_cancer.id = mir.id)
  ORDER BY mir.expectation DESC;


ALTER TABLE public.pred_cancer_truth_inference OWNER TO gengyl08;

--
-- Name: pred_cancer_truth_inference_bucketed; Type: VIEW; Schema: public; Owner: gengyl08
--

CREATE VIEW pred_cancer_truth_inference_bucketed AS
 SELECT pred_cancer_truth_inference.id,
    pred_cancer_truth_inference.truth,
    pred_cancer_truth_inference.prior,
    pred_cancer_truth_inference.inquery,
    pred_cancer_truth_inference.atomid,
    pred_cancer_truth_inference.itruth,
    pred_cancer_truth_inference.prob,
    pred_cancer_truth_inference.useful,
    pred_cancer_truth_inference.person1,
    pred_cancer_truth_inference.category,
    pred_cancer_truth_inference.expectation,
        CASE
            WHEN ((pred_cancer_truth_inference.expectation >= (0.0)::double precision) AND (pred_cancer_truth_inference.expectation <= (0.1)::double precision)) THEN 0
            WHEN ((pred_cancer_truth_inference.expectation >= (0.1)::double precision) AND (pred_cancer_truth_inference.expectation <= (0.2)::double precision)) THEN 1
            WHEN ((pred_cancer_truth_inference.expectation >= (0.2)::double precision) AND (pred_cancer_truth_inference.expectation <= (0.30000000000000004)::double precision)) THEN 2
            WHEN ((pred_cancer_truth_inference.expectation >= (0.30000000000000004)::double precision) AND (pred_cancer_truth_inference.expectation <= (0.4)::double precision)) THEN 3
            WHEN ((pred_cancer_truth_inference.expectation >= (0.4)::double precision) AND (pred_cancer_truth_inference.expectation <= (0.5)::double precision)) THEN 4
            WHEN ((pred_cancer_truth_inference.expectation >= (0.5)::double precision) AND (pred_cancer_truth_inference.expectation <= (0.6)::double precision)) THEN 5
            WHEN ((pred_cancer_truth_inference.expectation >= (0.6000000000000001)::double precision) AND (pred_cancer_truth_inference.expectation <= (0.7000000000000001)::double precision)) THEN 6
            WHEN ((pred_cancer_truth_inference.expectation >= (0.7000000000000001)::double precision) AND (pred_cancer_truth_inference.expectation <= (0.8)::double precision)) THEN 7
            WHEN ((pred_cancer_truth_inference.expectation >= (0.8)::double precision) AND (pred_cancer_truth_inference.expectation <= (0.9)::double precision)) THEN 8
            WHEN ((pred_cancer_truth_inference.expectation >= (0.9)::double precision) AND (pred_cancer_truth_inference.expectation <= (1.0)::double precision)) THEN 9
            ELSE NULL::integer
        END AS bucket
   FROM pred_cancer_truth_inference
  ORDER BY
        CASE
            WHEN ((pred_cancer_truth_inference.expectation >= (0.0)::double precision) AND (pred_cancer_truth_inference.expectation <= (0.1)::double precision)) THEN 0
            WHEN ((pred_cancer_truth_inference.expectation >= (0.1)::double precision) AND (pred_cancer_truth_inference.expectation <= (0.2)::double precision)) THEN 1
            WHEN ((pred_cancer_truth_inference.expectation >= (0.2)::double precision) AND (pred_cancer_truth_inference.expectation <= (0.30000000000000004)::double precision)) THEN 2
            WHEN ((pred_cancer_truth_inference.expectation >= (0.30000000000000004)::double precision) AND (pred_cancer_truth_inference.expectation <= (0.4)::double precision)) THEN 3
            WHEN ((pred_cancer_truth_inference.expectation >= (0.4)::double precision) AND (pred_cancer_truth_inference.expectation <= (0.5)::double precision)) THEN 4
            WHEN ((pred_cancer_truth_inference.expectation >= (0.5)::double precision) AND (pred_cancer_truth_inference.expectation <= (0.6)::double precision)) THEN 5
            WHEN ((pred_cancer_truth_inference.expectation >= (0.6000000000000001)::double precision) AND (pred_cancer_truth_inference.expectation <= (0.7000000000000001)::double precision)) THEN 6
            WHEN ((pred_cancer_truth_inference.expectation >= (0.7000000000000001)::double precision) AND (pred_cancer_truth_inference.expectation <= (0.8)::double precision)) THEN 7
            WHEN ((pred_cancer_truth_inference.expectation >= (0.8)::double precision) AND (pred_cancer_truth_inference.expectation <= (0.9)::double precision)) THEN 8
            WHEN ((pred_cancer_truth_inference.expectation >= (0.9)::double precision) AND (pred_cancer_truth_inference.expectation <= (1.0)::double precision)) THEN 9
            ELSE NULL::integer
        END;


ALTER TABLE public.pred_cancer_truth_inference_bucketed OWNER TO gengyl08;

--
-- Name: pred_cancer_truth_calibration; Type: VIEW; Schema: public; Owner: gengyl08
--

CREATE VIEW pred_cancer_truth_calibration AS
 SELECT b1.bucket,
    b1.num_variables,
    b2.num_correct,
    b3.num_incorrect
   FROM ((( SELECT pred_cancer_truth_inference_bucketed.bucket,
            count(*) AS num_variables
           FROM pred_cancer_truth_inference_bucketed
          GROUP BY pred_cancer_truth_inference_bucketed.bucket) b1
   LEFT JOIN ( SELECT pred_cancer_truth_inference_bucketed.bucket,
            count(*) AS num_correct
           FROM pred_cancer_truth_inference_bucketed
          WHERE (pred_cancer_truth_inference_bucketed.truth = true)
          GROUP BY pred_cancer_truth_inference_bucketed.bucket) b2 ON ((b1.bucket = b2.bucket)))
   LEFT JOIN ( SELECT pred_cancer_truth_inference_bucketed.bucket,
       count(*) AS num_incorrect
      FROM pred_cancer_truth_inference_bucketed
     WHERE (pred_cancer_truth_inference_bucketed.truth = false)
     GROUP BY pred_cancer_truth_inference_bucketed.bucket) b3 ON ((b1.bucket = b3.bucket)))
  ORDER BY b1.bucket;


ALTER TABLE public.pred_cancer_truth_calibration OWNER TO gengyl08;

--
-- Name: pred_cancer_truth_cardinality; Type: TABLE; Schema: public; Owner: gengyl08; Tablespace: 
--

CREATE TABLE pred_cancer_truth_cardinality (
    cardinality text
);


ALTER TABLE public.pred_cancer_truth_cardinality OWNER TO gengyl08;

--
-- Name: pred_smokes; Type: TABLE; Schema: public; Owner: gengyl08; Tablespace: 
--

CREATE TABLE pred_smokes (
    id bigint NOT NULL,
    truth boolean DEFAULT false,
    prior double precision,
    inquery boolean DEFAULT false,
    atomid integer,
    itruth boolean,
    prob double precision,
    useful boolean DEFAULT false,
    person1 bigint
);


ALTER TABLE public.pred_smokes OWNER TO gengyl08;

--
-- Name: pred_smokes_evidence; Type: TABLE; Schema: public; Owner: gengyl08; Tablespace: 
--

CREATE TABLE pred_smokes_evidence (
    id bigint NOT NULL,
    truth boolean,
    prior double precision,
    club integer DEFAULT 0,
    atomid integer,
    itruth boolean,
    prob double precision,
    useful boolean DEFAULT false,
    person1 bigint
);


ALTER TABLE public.pred_smokes_evidence OWNER TO gengyl08;

--
-- Name: pred_smokes_evidence_id_seq; Type: SEQUENCE; Schema: public; Owner: gengyl08
--

CREATE SEQUENCE pred_smokes_evidence_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.pred_smokes_evidence_id_seq OWNER TO gengyl08;

--
-- Name: pred_smokes_evidence_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: gengyl08
--

ALTER SEQUENCE pred_smokes_evidence_id_seq OWNED BY pred_smokes_evidence.id;


--
-- Name: pred_smokes_id_seq; Type: SEQUENCE; Schema: public; Owner: gengyl08
--

CREATE SEQUENCE pred_smokes_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.pred_smokes_id_seq OWNER TO gengyl08;

--
-- Name: pred_smokes_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: gengyl08
--

ALTER SEQUENCE pred_smokes_id_seq OWNED BY pred_smokes.id;


--
-- Name: pred_smokes_truth_inference; Type: VIEW; Schema: public; Owner: gengyl08
--

CREATE VIEW pred_smokes_truth_inference AS
 SELECT pred_smokes.id,
    pred_smokes.truth,
    pred_smokes.prior,
    pred_smokes.inquery,
    pred_smokes.atomid,
    pred_smokes.itruth,
    pred_smokes.prob,
    pred_smokes.useful,
    pred_smokes.person1,
    mir.category,
    mir.expectation
   FROM pred_smokes,
    dd_inference_result_variables mir
  WHERE (pred_smokes.id = mir.id)
  ORDER BY mir.expectation DESC;


ALTER TABLE public.pred_smokes_truth_inference OWNER TO gengyl08;

--
-- Name: pred_smokes_truth_inference_bucketed; Type: VIEW; Schema: public; Owner: gengyl08
--

CREATE VIEW pred_smokes_truth_inference_bucketed AS
 SELECT pred_smokes_truth_inference.id,
    pred_smokes_truth_inference.truth,
    pred_smokes_truth_inference.prior,
    pred_smokes_truth_inference.inquery,
    pred_smokes_truth_inference.atomid,
    pred_smokes_truth_inference.itruth,
    pred_smokes_truth_inference.prob,
    pred_smokes_truth_inference.useful,
    pred_smokes_truth_inference.person1,
    pred_smokes_truth_inference.category,
    pred_smokes_truth_inference.expectation,
        CASE
            WHEN ((pred_smokes_truth_inference.expectation >= (0.0)::double precision) AND (pred_smokes_truth_inference.expectation <= (0.1)::double precision)) THEN 0
            WHEN ((pred_smokes_truth_inference.expectation >= (0.1)::double precision) AND (pred_smokes_truth_inference.expectation <= (0.2)::double precision)) THEN 1
            WHEN ((pred_smokes_truth_inference.expectation >= (0.2)::double precision) AND (pred_smokes_truth_inference.expectation <= (0.30000000000000004)::double precision)) THEN 2
            WHEN ((pred_smokes_truth_inference.expectation >= (0.30000000000000004)::double precision) AND (pred_smokes_truth_inference.expectation <= (0.4)::double precision)) THEN 3
            WHEN ((pred_smokes_truth_inference.expectation >= (0.4)::double precision) AND (pred_smokes_truth_inference.expectation <= (0.5)::double precision)) THEN 4
            WHEN ((pred_smokes_truth_inference.expectation >= (0.5)::double precision) AND (pred_smokes_truth_inference.expectation <= (0.6)::double precision)) THEN 5
            WHEN ((pred_smokes_truth_inference.expectation >= (0.6000000000000001)::double precision) AND (pred_smokes_truth_inference.expectation <= (0.7000000000000001)::double precision)) THEN 6
            WHEN ((pred_smokes_truth_inference.expectation >= (0.7000000000000001)::double precision) AND (pred_smokes_truth_inference.expectation <= (0.8)::double precision)) THEN 7
            WHEN ((pred_smokes_truth_inference.expectation >= (0.8)::double precision) AND (pred_smokes_truth_inference.expectation <= (0.9)::double precision)) THEN 8
            WHEN ((pred_smokes_truth_inference.expectation >= (0.9)::double precision) AND (pred_smokes_truth_inference.expectation <= (1.0)::double precision)) THEN 9
            ELSE NULL::integer
        END AS bucket
   FROM pred_smokes_truth_inference
  ORDER BY
        CASE
            WHEN ((pred_smokes_truth_inference.expectation >= (0.0)::double precision) AND (pred_smokes_truth_inference.expectation <= (0.1)::double precision)) THEN 0
            WHEN ((pred_smokes_truth_inference.expectation >= (0.1)::double precision) AND (pred_smokes_truth_inference.expectation <= (0.2)::double precision)) THEN 1
            WHEN ((pred_smokes_truth_inference.expectation >= (0.2)::double precision) AND (pred_smokes_truth_inference.expectation <= (0.30000000000000004)::double precision)) THEN 2
            WHEN ((pred_smokes_truth_inference.expectation >= (0.30000000000000004)::double precision) AND (pred_smokes_truth_inference.expectation <= (0.4)::double precision)) THEN 3
            WHEN ((pred_smokes_truth_inference.expectation >= (0.4)::double precision) AND (pred_smokes_truth_inference.expectation <= (0.5)::double precision)) THEN 4
            WHEN ((pred_smokes_truth_inference.expectation >= (0.5)::double precision) AND (pred_smokes_truth_inference.expectation <= (0.6)::double precision)) THEN 5
            WHEN ((pred_smokes_truth_inference.expectation >= (0.6000000000000001)::double precision) AND (pred_smokes_truth_inference.expectation <= (0.7000000000000001)::double precision)) THEN 6
            WHEN ((pred_smokes_truth_inference.expectation >= (0.7000000000000001)::double precision) AND (pred_smokes_truth_inference.expectation <= (0.8)::double precision)) THEN 7
            WHEN ((pred_smokes_truth_inference.expectation >= (0.8)::double precision) AND (pred_smokes_truth_inference.expectation <= (0.9)::double precision)) THEN 8
            WHEN ((pred_smokes_truth_inference.expectation >= (0.9)::double precision) AND (pred_smokes_truth_inference.expectation <= (1.0)::double precision)) THEN 9
            ELSE NULL::integer
        END;


ALTER TABLE public.pred_smokes_truth_inference_bucketed OWNER TO gengyl08;

--
-- Name: pred_smokes_truth_calibration; Type: VIEW; Schema: public; Owner: gengyl08
--

CREATE VIEW pred_smokes_truth_calibration AS
 SELECT b1.bucket,
    b1.num_variables,
    b2.num_correct,
    b3.num_incorrect
   FROM ((( SELECT pred_smokes_truth_inference_bucketed.bucket,
            count(*) AS num_variables
           FROM pred_smokes_truth_inference_bucketed
          GROUP BY pred_smokes_truth_inference_bucketed.bucket) b1
   LEFT JOIN ( SELECT pred_smokes_truth_inference_bucketed.bucket,
            count(*) AS num_correct
           FROM pred_smokes_truth_inference_bucketed
          WHERE (pred_smokes_truth_inference_bucketed.truth = true)
          GROUP BY pred_smokes_truth_inference_bucketed.bucket) b2 ON ((b1.bucket = b2.bucket)))
   LEFT JOIN ( SELECT pred_smokes_truth_inference_bucketed.bucket,
       count(*) AS num_incorrect
      FROM pred_smokes_truth_inference_bucketed
     WHERE (pred_smokes_truth_inference_bucketed.truth = false)
     GROUP BY pred_smokes_truth_inference_bucketed.bucket) b3 ON ((b1.bucket = b3.bucket)))
  ORDER BY b1.bucket;


ALTER TABLE public.pred_smokes_truth_calibration OWNER TO gengyl08;

--
-- Name: pred_smokes_truth_cardinality; Type: TABLE; Schema: public; Owner: gengyl08; Tablespace: 
--

CREATE TABLE pred_smokes_truth_cardinality (
    cardinality text
);


ALTER TABLE public.pred_smokes_truth_cardinality OWNER TO gengyl08;

--
-- Name: type_person; Type: TABLE; Schema: public; Owner: gengyl08; Tablespace: 
--

CREATE TABLE type_person (
    constantid bigint,
    constantvalue text
);


ALTER TABLE public.type_person OWNER TO gengyl08;

--
-- Name: id; Type: DEFAULT; Schema: public; Owner: gengyl08
--

ALTER TABLE ONLY pred_cancer ALTER COLUMN id SET DEFAULT nextval('pred_cancer_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: gengyl08
--

ALTER TABLE ONLY pred_cancer_evidence ALTER COLUMN id SET DEFAULT nextval('pred_cancer_evidence_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: gengyl08
--

ALTER TABLE ONLY pred_smokes ALTER COLUMN id SET DEFAULT nextval('pred_smokes_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: gengyl08
--

ALTER TABLE ONLY pred_smokes_evidence ALTER COLUMN id SET DEFAULT nextval('pred_smokes_evidence_id_seq'::regclass);


--
-- Data for Name: constants; Type: TABLE DATA; Schema: public; Owner: gengyl08
--

COPY constants (id, string) FROM stdin;
4	Ellen
3	Bob
2	Edward
1	Anna
\.


--
-- Name: dd_factor_sequence; Type: SEQUENCE SET; Schema: public; Owner: gengyl08
--

SELECT pg_catalog.setval('dd_factor_sequence', 3, true);


--
-- Data for Name: dd_graph_factormeta; Type: TABLE DATA; Schema: public; Owner: gengyl08
--

COPY dd_graph_factormeta (name, funcid, sign) FROM stdin;
Clause1	1	false true
\.


--
-- Data for Name: dd_graph_variables_holdout; Type: TABLE DATA; Schema: public; Owner: gengyl08
--

COPY dd_graph_variables_holdout (variable_id) FROM stdin;
\.


--
-- Data for Name: dd_graph_weights; Type: TABLE DATA; Schema: public; Owner: gengyl08
--

COPY dd_graph_weights (id, isfixed, initvalue, cardinality) FROM stdin;
0	0	0	\N
\.


--
-- Data for Name: dd_inference_result_variables; Type: TABLE DATA; Schema: public; Owner: gengyl08
--

COPY dd_inference_result_variables (id, category, expectation) FROM stdin;
\.


--
-- Data for Name: dd_inference_result_weights; Type: TABLE DATA; Schema: public; Owner: gengyl08
--

COPY dd_inference_result_weights (id, weight) FROM stdin;
0	-0.0769447640072727229
\.


--
-- Data for Name: dd_query_clause1; Type: TABLE DATA; Schema: public; Owner: gengyl08
--

COPY dd_query_clause1 ("t0.id", "t1.id", id) FROM stdin;
0	6	0
1	5	1
2	4	2
3	7	3
\.


--
-- Name: dd_variable_sequence; Type: SEQUENCE SET; Schema: public; Owner: gengyl08
--

SELECT pg_catalog.setval('dd_variable_sequence', 7, true);


--
-- Name: dd_weight_sequence; Type: SEQUENCE SET; Schema: public; Owner: gengyl08
--

SELECT pg_catalog.setval('dd_weight_sequence', 0, true);


--
-- Data for Name: pred_cancer; Type: TABLE DATA; Schema: public; Owner: gengyl08
--

COPY pred_cancer (id, truth, prior, inquery, atomid, itruth, prob, useful, person1) FROM stdin;
4	f	\N	t	\N	\N	\N	f	2
5	t	\N	t	\N	\N	\N	f	1
6	t	\N	t	\N	\N	\N	f	3
7	t	\N	t	\N	\N	\N	f	4
\.


--
-- Data for Name: pred_cancer_evidence; Type: TABLE DATA; Schema: public; Owner: gengyl08
--

COPY pred_cancer_evidence (id, truth, prior, club, atomid, itruth, prob, useful, person1) FROM stdin;
1	t	\N	2	\N	\N	\N	f	1
2	t	\N	2	\N	\N	\N	f	3
3	t	\N	2	\N	\N	\N	f	4
\.


--
-- Name: pred_cancer_evidence_id_seq; Type: SEQUENCE SET; Schema: public; Owner: gengyl08
--

SELECT pg_catalog.setval('pred_cancer_evidence_id_seq', 3, true);


--
-- Name: pred_cancer_id_seq; Type: SEQUENCE SET; Schema: public; Owner: gengyl08
--

SELECT pg_catalog.setval('pred_cancer_id_seq', 4, true);


--
-- Data for Name: pred_cancer_truth_cardinality; Type: TABLE DATA; Schema: public; Owner: gengyl08
--

COPY pred_cancer_truth_cardinality (cardinality) FROM stdin;
01
\.


--
-- Data for Name: pred_smokes; Type: TABLE DATA; Schema: public; Owner: gengyl08
--

COPY pred_smokes (id, truth, prior, inquery, atomid, itruth, prob, useful, person1) FROM stdin;
0	f	\N	t	\N	\N	\N	f	3
1	t	\N	t	\N	\N	\N	f	1
2	t	\N	t	\N	\N	\N	f	2
3	t	\N	t	\N	\N	\N	f	4
\.


--
-- Data for Name: pred_smokes_evidence; Type: TABLE DATA; Schema: public; Owner: gengyl08
--

COPY pred_smokes_evidence (id, truth, prior, club, atomid, itruth, prob, useful, person1) FROM stdin;
1	t	\N	2	\N	\N	\N	f	1
2	t	\N	2	\N	\N	\N	f	2
3	t	\N	2	\N	\N	\N	f	4
\.


--
-- Name: pred_smokes_evidence_id_seq; Type: SEQUENCE SET; Schema: public; Owner: gengyl08
--

SELECT pg_catalog.setval('pred_smokes_evidence_id_seq', 3, true);


--
-- Name: pred_smokes_id_seq; Type: SEQUENCE SET; Schema: public; Owner: gengyl08
--

SELECT pg_catalog.setval('pred_smokes_id_seq', 4, true);


--
-- Data for Name: pred_smokes_truth_cardinality; Type: TABLE DATA; Schema: public; Owner: gengyl08
--

COPY pred_smokes_truth_cardinality (cardinality) FROM stdin;
01
\.


--
-- Data for Name: type_person; Type: TABLE DATA; Schema: public; Owner: gengyl08
--

COPY type_person (constantid, constantvalue) FROM stdin;
4	Ellen
3	Bob
2	Edward
1	Anna
\.


--
-- Name: constants_pkey; Type: CONSTRAINT; Schema: public; Owner: gengyl08; Tablespace: 
--

ALTER TABLE ONLY constants
    ADD CONSTRAINT constants_pkey PRIMARY KEY (id);


--
-- Name: dd_graph_variables_holdout_pkey; Type: CONSTRAINT; Schema: public; Owner: gengyl08; Tablespace: 
--

ALTER TABLE ONLY dd_graph_variables_holdout
    ADD CONSTRAINT dd_graph_variables_holdout_pkey PRIMARY KEY (variable_id);


--
-- Name: dd_inference_result_weights_pkey; Type: CONSTRAINT; Schema: public; Owner: gengyl08; Tablespace: 
--

ALTER TABLE ONLY dd_inference_result_weights
    ADD CONSTRAINT dd_inference_result_weights_pkey PRIMARY KEY (id);


--
-- Name: dd_inference_result_variables_idx; Type: INDEX; Schema: public; Owner: gengyl08; Tablespace: 
--

CREATE INDEX dd_inference_result_variables_idx ON dd_inference_result_variables USING btree (expectation);


--
-- Name: dd_inference_result_weights_idx; Type: INDEX; Schema: public; Owner: gengyl08; Tablespace: 
--

CREATE INDEX dd_inference_result_weights_idx ON dd_inference_result_weights USING btree (weight);


--
-- Name: public; Type: ACL; Schema: -; Owner: gengyl08
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM gengyl08;
GRANT ALL ON SCHEMA public TO gengyl08;
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- PostgreSQL database dump complete
--

