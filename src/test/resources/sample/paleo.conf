deepdive {
  
  relations.documents.schema: {
    varid: Integer, 
    meta: Text
  }

  relations.sentences.schema: {
    varid: Integer, 
    document_id: Integer, 
    index: Integer, 
    words: Text, 
    is_paper_body: Boolean, 
    is_section_header: Boolean, 
    is_systematic: Boolean,
    meta: Text
  }

  relations.taxonomy_entities.schema: {  
    varid: Integer,
    entity_name: String,
    phrase: String,
    sentence_id: Integer,
    meta: Text
  }

  relations.entities_temporal.schema: {  
    varid: Integer,
    entity_name: String,
    phrase: String,
    sentence_id: Integer,
    meta: Text
  }

  relations.belongs_to_relations.schema: {  
    varid: Integer,
    entity1_id: Integer,
    entity2_id: Integer,
    dep_path: String,
    meta: Text
  }

  ingest: {
    documents.source: "data/documents.tsv"
    sentences.source:"data/sentences.tsv"
  }

  extractions: {

    taxonomy.output_relation: "taxonomy_entities"
    taxonomy.input: "SELECT * FROM sentences"
    taxonomy.udf: "udf/taxonomy.py"
    taxonomy.factor.name: "Taxonomy"
    taxonomy.factor.function: "Imply()"
    taxonomy.factor.weight: 1

    temporal.output_relation: "temporal_entities"
    temporal.input: "SELECT * FROM sentences"
    temporal.udf: "udf/temporal.py"
    temporal.factor.name: "Temporal"
    temporal.factor.function: "Imply()"
    temporal.factor.weight: 1

    belongs_to.output_relation: "belongs_to_relations"
    belongs_to.input: "SELECT * FROM taxonomy_entities e1 JOIN taxonomy_entities e2 ON e1.sentence_id = e2.sentence_id"
    belongs_to.udf: "udf/relations.py"
    belongs_to.factor.name: "BelongsTo"
    belongs_to.factor.function: "Imply(entity1, entity2)"
    belongs_to.factor.weight: "?(dep_path)"

  }
}